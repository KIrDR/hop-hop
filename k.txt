alter session set NLS_LANGUAGE='AMERICAN';

-- Определите размеры областей памяти SGA.
select name, value from v$sga ;
-- Получите список всех параметров экземпляра.

select * from V$parameter;
-- Получите список управляющих файлов.
show parameter control ;
    select * FROM V$CONTROLFILE;
-- Сформируйте PFILE.

CREATE PFILE = 'EXEMPLE.ORA' FROM MEMORY ;
-- Создайте таблицу из двух столбцов, один из которых первичный ключ. Получите перечень всех сегментов. Вставьте данные в таблицу
-- . Определите, сколько в сегменте таблицы экстентов, их размер в блоках и байтах.

CREATE TABLE TABLE1 (
    AO1 NUMBER PRIMARY KEY,
    AO2 NUMBER
);
select * from user_tables where table_name = 'TABLE1';
select * from USER_SEGMENTS;
insert into table1(AO1, AO2) values (12,23);
insert into table1(AO1, AO2) values (125,23);
insert into table1(AO1, AO2) values (162,23);
insert into table1(AO1, AO2) values (122,23);

SELECT extents,blocks ,bytes, (bytes/blocks) as "размер блока"
FROM user_segments where segment_name = 'TABLE1';
-- Получите перечень всех процессов СУБД Oracle. Для серверных процессов укажите режим подключения
-- .Если username = null , то это серверный процесс
-- Для фоновых укажите работающие в настоящий момент.
select * from V$PROCESS;
select * from V$SESSION where username is NULl;

select V$PROCESS.spid , V$PROCESS.program
select username from v$session where PADDR != HEXTORAW('00');

SELECT p.spid AS "PID",
       p.program AS "Proces",
       CASE WHEN s.username IS NULL THEN 'Fon' ELSE 'Sevrer' END AS "type",
       CASE WHEN s.username IS NOT NULL THEN s.logon_time ELSE NULL END AS "Connect time"
FROM v$process p
LEFT JOIN v$session s ON (p.addr = s.paddr)
ORDER BY "type" DESC, "PID";

-- Получите перечень всех табличных пространств и их файлов.
select t.tablespace_name, d.file_name from DBA_TABLESPACES t join DBA_DATA_FILES d on t.tablespace_name = d.tablespace_name;


-- Получите перечень всех ролей.
select * from dba_roles;
-- Получите перечень привилегий для определенной роли.
select * from DBA_ROLE_PRIVS where grantee = 'C##DKA2';
-- Получите перечень всех пользователей.
select * from dba_users;

-- Создайте роль.

create role F2s ;
-- Создайте пользователя.
create user testuser identified by pass123r;
-- Получите перечень всех профилей безопасности.
select * from DBA_PROFILES;
-- Получите перечень всех параметров профиля безопасности. ??????????
select * from dba_profile_parameters;
-- Создайте профиль безопасности.
create  profile Bhij2 limit
password_life_time 23
SESSIONS_PER_USER 3
failed_login_attempts 7
password_lock_time 2
connect_time 1890
idle_time 20 ;
-- Создайте последовательность S1, со следующими характеристиками: начальное значение 1000; приращение 10;
-- минимальное значение 0; максимальное значение 10000;
-- циклическую; кэширующую 30 значений в памяти; гарантирующую хронологию значений.????
-- Создайте таблицу T1 с тремя столбцами и введите (INSERT) 10 строк, со значениями из S1.

create sequence S1
start with 1000
increment by 10
minvalue 0
maxvalue 10000
cycle
cache 30
order ;

create table table2 (
    p1 numeric,
    p2 varchar2(12)
);

begin
    for i in 1..10 loop
    insert into table2(p1,p2) values (s1.nextval,'nf');
    end loop;
end;

select * from table2;

select * from  v$log where STATUS = 'CURRENT';
select * from V$ARCHIVED_LOG fetch first 1 row only ;

select   buffer_pool from SYS.USER_TABLES;

select * from V$PWFILE_USERS where sysdba = 'TRUE';

select * from V_$SGA_DYNAMIC_COMPONENTS where COMPONENT = 'DEFAULT buffer cache' ;

select * from V$BGPROCESS where PADDR != HEXTORAW('00');

SELECT * FROM USER_SEGMENTS WHERE SEGMENT_TYPE = 'TABLE' order by bytes FETCH FIRST 1 ROW ONLY;
-- Создайте частный и публичный синоним для одной из таблиц и продемонстрируйте его область видимости.
-- Найдите созданные синонимы в представлениях словаря Oracle.???????

CREATE SYNONYM SYN1 FOR TABLE1;
CREATE PUBLIC SYNONYM SYN2 FOR TABLE2;

SELECT * FROM SYN1;
SELECT * FROM SYN2;
SELECT * FROM SYS.ALL_SYNONYMS WHERE SYNONYM_NAME = 'SYN2' OR SYNONYM_NAME = 'SYN1';

-- Разработайте анонимный блок, демонстрирующий возникновение и обработку исключений WHEN TO_MANY_ROWS и NO_DATA_FOUND.

CREATE TABLE EMPLOYEES
    (NAME VARCHAR(20));


DECLARE
    V_COUNT NUMBER;
    BEGIN

  SELECT COUNT(*) INTO v_count FROM employees;
  DBMS_OUTPUT.PUT_LINE(V_COUNT);
end;

INSERT INTO  EMPLOYEES(NAME) VALUES ('DFSF');
DECLARE
  v_count VARCHAR2(30);
BEGIN
  -- Попытка выбрать одну строку из таблицы слишком большим количеством записей
  SELECT NAME INTO v_count FROM employees WHERE NAME = 'DFSF';


EXCEPTION
  WHEN TOO_MANY_ROWS THEN
    -- Обработка исключения WHEN TOO_MANY_ROWS
    DBMS_OUTPUT.PUT_LINE('Возникло исключение TOO_MANY_ROWS: найдено больше одной строки.');
  WHEN NO_DATA_FOUND THEN
    -- Обработка исключения WHEN NO_DATA_FOUND
    DBMS_OUTPUT.PUT_LINE('Возникло исключение NO_DATA_FOUND: данные не были найдены.');
END;

-- Получите перечень всех файлов групп журналов повтора.

SELECT * FROM V$LOGFILE;
-- Определите текущую группу журналов повтора.

SELECT * FROM V$LOGFILE WHERE STATUS = 'CURRENT';

-- Получите перечень контрольных файлов.
SELECT * FROM V_$CONTROLFILE;

-- Создайте таблицу и вставьте в нее 100 записей. Найдите таблицу и ее свойства в представлениях словаря.
CREATE TABLE HOO (
    HELLO NUMBER
);

BEGIN
    FOR i in 0..100 loop
        insert into hoo(hello) values (i);
end loop;
end;

select * from user_tables where TABLE_NAME = 'HOO';

-- Получите список сегментов табличного пространства.
select * from DBA_SEGMENTS;

-- Выведите список всех объектов, доступных пользователю.
select * from SYS.USER_OBJECTS;

-- Вычислите количество блоков, занятых таблицей.
select BLOCKS from SYS.USER_SEGMENTS where SEGMENT_NAME = 'HOO';

-- Выведите список текущих сессий.
select * from V_$SESSION where STATUS = 'ACTIVE';

-- Выведите, производится ли архивирование журналов повтора.
select log_mode from V$database ;
-- Создайте представление с определенными параметрами.
create view vr as select * from HOO ;

select * from  vr;
CREATE VIEW my_view(param1, param2 )
AS
SELECT HELLO, HELLO
FROM HOO
;
SELECT * FROM my_view;
-- Создайте database link с определенными параметрами.

CREATE DATABASE LINK DB13
   CONNECT TO C##VVS
   IDENTIFIED BY PASSWORD
   USING 'db13';
-- Продемонстрируйте эскалацию исключения.
    declare
    ni number ;
    pi number ;
    myexcepiton exception ;
        begin
            ni := 30 ;

            begin
                if (ni = 30 ) then
                raise myexcepiton;
                end if;
                exception
            when too_many_rows
                then DBMS_OUTPUT.PUT_LINE('привет');

            end;
exception when myexcepiton then DBMS_OUTPUT.PUT_LINE('you');

        end;



-- Задачи среднего уровня:

-- Создайте процедуру, которая выводит список заказов и их итоговую стоимость для определенного покупателя.
-- Параметр – наименование покупателя. Обработайте возможные ошибки.
CREATE OR REPLACE PROCEDURE GET_ORDER_TOTALS (
  p_customer_name IN CUSTOMERS.COMPANY%TYPE
) AS
  v_cust_num CUSTOMERS.CUST_NUM%TYPE;
BEGIN
  -- Получаем номер покупателя по его имени
  SELECT CUST_NUM INTO v_cust_num
  FROM CUSTOMERS
  WHERE COMPANY = p_customer_name;

  -- Выводим список заказов и их итоговую стоимость
  FOR order_rec IN (
    SELECT o.ORDER_NUM, o.ORDER_DATE, SUM(o.AMOUNT) AS TOTAL_AMOUNT
    FROM ORDERS o
    WHERE o.CUST = v_cust_num
    GROUP BY o.ORDER_NUM, o.ORDER_DATE
  ) LOOP
    DBMS_OUTPUT.PUT_LINE('Order Number: ' || order_rec.ORDER_NUM);
    DBMS_OUTPUT.PUT_LINE('Order Date: ' || order_rec.ORDER_DATE);
    DBMS_OUTPUT.PUT_LINE('Total Amount: ' || order_rec.TOTAL_AMOUNT);
    DBMS_OUTPUT.PUT_LINE('---------------------------');
  END LOOP;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No orders found for the customer: ' || p_customer_name);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

BEGIN
  GET_ORDER_TOTALS('First Corp.');
END;


-- Создайте функцию, которая подсчитывает количество заказов покупателя за определенный период.
-- Параметры – покупатель, дата начала периода, дата окончания периода.

-- Создайте процедуру, которая выводит список всех товаров, приобретенных покупателем, с указанием суммы продаж по
-- возрастанию. Параметр – наименование покупателя. Обработайте возможные ошибки.

create or replace  procedure list_tovar (
company_name CUSTOMERS.company%type
)
is
    custom_id number;
    begin
        select CUST_NUM into custom_id from CUSTOMERS where company_name = COMPANY;

        for curs in (

            select DESCRIPTION, AMOUNT*qty as "sum"from ORDERS join products on ORDERS.MFR = PRODUCTS.MFR_ID and ORDERS.PRODUCT = PRODUCTS.PRODUCT_ID where cust = 2111
            )
            loop
                DBMS_OUTPUT.put_line(('product:  ' || curs.DESCRIPTION || '  ' || curs."sum"));
            end loop;
    end;

    begin
        list_tovar('JCP Inc.');
    end;
-- Создайте функцию, которая добавляет покупателя в таблицу Customers, и возвращает код
-- добавленного покупателя или -1 в случае ошибки. Параметры соответствуют столбцам таблицы
-- , кроме кода покупателя, который задается при помощи последовательности.

create sequence numb_customr
start with 2200
increment by 1
maxvalue 3000000
minvalue 1
cycle;

    CREATE OR REPLACE FUNCTION add_customer(
    company_name CUSTOMERS.COMPANY%TYPE,
    p_cust_rep CUSTOMERS.CUST_REP%TYPE,
    p_credit_limit CUSTOMERS.CREDIT_LIMIT%TYPE
) RETURN NUMBER
IS
    number_customer NUMBER;
BEGIN
    SELECT numb_customr.nextval INTO number_customer FROM DUAL;

    INSERT INTO CUSTOMERS (CUST_NUM, COMPANY, CUST_REP, CREDIT_LIMIT)
    VALUES (number_customer, company_name, p_cust_rep, p_credit_limit);

    RETURN number_customer;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1;
END;
/
DECLARE
    n NUMBER;
BEGIN
    n := add_customer('Nuw', 110, 100000);
    DBMS_OUTPUT.PUT_LINE(n);
END;

-- Создайте процедуру, которая выводит список покупателей, в порядке убывания общей стоимости заказов.
-- Параметры – дата начала периода, дата окончания периода. Обработайте возможные ошибки.
CREATE OR REPLACE PROCEDURE GetCustomersByOrderTotal(
    start_date DATE,
    end_date DATE
)
IS
BEGIN
    for curr in (
    SELECT c.COMPANY, SUM(o.AMOUNT) AS TotalOrderAmount
    FROM CUSTOMERS c
    JOIN ORDERS o ON c.CUST_NUM = o.CUST
    WHERE o.ORDER_DATE BETWEEN start_date AND end_date
    GROUP BY c.COMPANY
    ORDER BY TotalOrderAmount DESC)
    loop
        DBMS_OUTPUT.PUT_LINE(curr.COMPANY || '    ' || curr.TotalOrderAmount );
        end loop;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;

    begin
        GetCustomersByOrderTotal(date '2000-10-10',date '2020-10-10');
    end;
-- Создайте функцию, которая подсчитывает количество заказанных товаров за определенный период.
-- Параметры – дата начала периода, дата окончания периода.

create or replace function func221(
 start_date DATE,
    end_date DATE
) return number
is
    con number;
    begin
        select count(*) into con from ORDERS where ORDER_DATE between start_date and end_date;
    return con ;
        end;
    DECLARE
    n NUMBER;
BEGIN
    n := func221(date '2000-10-10',date '2020-10-10');
    DBMS_OUTPUT.PUT_LINE(n);
END;


-- Создайте процедуру, которая выводит список покупателей, у которых есть заказы в этом временном периоде.
-- Параметры – дата начала периода, дата окончания периода. Обработайте возможные ошибки.


-- Создайте функцию, которая подсчитывает количество покупателей определенного товара. Параметры – наименование товара.
-- Создайте процедуру, которая увеличивает на 10% стоимость определенного товара. Параметр – наименование товара. Обработайте возможные ошибки.
-- Создайте функцию, которая вычисляет количество заказов, выполненных в определенном году для определенного покупателя. Параметры – покупатель, год товара.

-- Задачи посложнее:

-- Создайте процедуру, которая добавляет заказ.
-- Обработайте возможные ошибки.
-- Создайте триггер, который контролирует целостность данных при добавлении заказа.

CREATE OR REPLACE PROCEDURE ADD_ORDER(
    p_order_num INTEGER,
    p_order_date DATE,
    p_cust INTEGER,
    p_rep INTEGER,
    p_mfr CHAR,
    p_product CHAR,
    p_qty INTEGER,
    p_amount DECIMAL
)
IS
BEGIN
    INSERT INTO ORDERS (ORDER_NUM, ORDER_DATE, CUST, REP, MFR, PRODUCT, QTY, AMOUNT)
    VALUES (p_order_num, p_order_date, p_cust, p_rep, p_mfr, p_product, p_qty, p_amount);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;

create or replace trigger order_trigger
    before insert on orders
    for each row
    declare
        v_product_qty number ;
begin

    end;


CREATE OR REPLACE TRIGGER ORDER_INTEGRITY_TRIGGER
BEFORE INSERT ON ORDERS
FOR EACH ROW
DECLARE
    v_product_qty INTEGER;
BEGIN
    SELECT QTY_ON_HAND INTO v_product_qty
    FROM PRODUCTS
    WHERE MFR_ID = :NEW.MFR
      AND PRODUCT_ID = :NEW.PRODUCT;

    IF v_product_qty IS NULL OR v_product_qty < :NEW.QTY THEN
        RAISE_APPLICATION_ERROR(-20001, 'Invalid product or insufficient quantity.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Invalid product.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'An error occurred: ' || SQLERRM);
END;

-- Создайте функцию, которая возвращает количество заказов покупателя помесячно за определенный период.
-- Параметры – покупатель, дата начала периода, дата окончания периода. Обработайте возможные ошибки.

CREATE OR REPLACE FUNCTION func1234
(
    company_name VARCHAR2,
    vstart DATE,
    vend DATE
) RETURN SYS_REFCURSOR
IS
    i SYS_REFCURSOR;
BEGIN
    OPEN i FOR        SELECT COUNT(*) AS order_count,
               TO_CHAR(ORDER_DATE, 'yyyy-mm') AS order_month
        FROM ORDERS
        INNER JOIN CUSTOMERS ON ORDERS.CUST = CUSTOMERS.CUST_NUM
        WHERE CUSTOMERS.COMPANY = company_name
          AND ORDER_DATE < vend AND ORDER_DATE > vstart
        GROUP BY TO_CHAR(ORDER_DATE, 'yyyy-mm')
    ;
    RETURN i;
END;

    declare
        curs sys_refcursor;
        v_numb number;
        v_mon date;
        begin
        curs := func1234('JCP Inc.',date '2005-10-10', date '2010-10-10');
        loop
            fetch curs into v_numb, v_mon;
            exit when curs%notfound;
            DBMS_OUTPUT.put_line('Collvo ' || v_numb || ' ' || v_mon );
        end loop;
    end;

-- Создайте процедуру, которая выводит в консоль список всех товаров,
-- не приобретенных ни одним покупателем в определенном году по убыванию количества на складе.
-- Параметр – год. Обработайте возможные ошибки.

create or replace procedure proc12 (
v_year number
)
is
    v_start date;
    v_end date;

    begin
        v_start := To_date(v_year || '-01-01', 'YYYY-MM-DD');
        v_end := ADD_MONTHS(v_start,12);

        for i in
            (select PRODUCTS.DESCRIPTION from PRODUCTS
            where not exists (
                select * from orders where ORDER_DATE between v_start and v_end and
                                  Orders.PRODUCT = PRODUCTS.PRODUCT_ID and orders.mfr = PRODUCTS.mfr_id
                )
                order by PRODUCTS.DESCRIPTION desc
            )
        loop
            DBMS_OUTPUT.put_line(i.DESCRIPTION);
            end loop;
    end;

    begin
        proc12(2008);
    end;
-- Создайте функцию, которая подсчитывает количество заказов покупателя за определенный год.

create or replace  function func12434
(v_number number, v_name nvarchar2)  return number
is
    v_id_cust number;
        v_count number;
        v_start date;
        v_end date;
    begin
        v_start := TO_DATE(v_number || '-01-01','YYYY-MM-DD' );
        v_end := ADD_MONTHS(v_start,12);
select cust_num into v_id_cust from customers where COMPANY = v_name;
        select count(*) into v_count from ORDERS where orders.cust = v_id_cust and ORDER_DATE BETWEEN v_start AND V_END ;
        RETURN v_count;
    end;

    DECLARE
        N NUMBER;
        BEGIN
        N := FUNC12434(2008,'Holm \& Landis');
        DBMS_OUTPUT.PUT_LINE(N);
    end;

-- Параметры – год, часть имени покупателя или код.


-- Создайте процедуру, которая сортирует таблицу по определенному столбцу.
-- Параметры – название столбца, порядок сортировки (ASC, DESC). Обработайте возможные ошибки.

CREATE OR REPLACE PROCEDURE SORTPROC (
COLUMN_NAME VARCHAR2,
ORDER_TYPE VARCHAR2
)
IS
    CURSOR ORDER_CUR IS
        select * FROM CUSTOMERS ORDER BY COLUMN_NAME || ' ' || ORDER_TYPE;
    BEGIN
        FOR REC IN ORDER_CUR
        LOOP
            DBMS_OUTPUT.PUT_LINE( REC.CUST_NUM || ' ' || REC.COMPANY || '' || REC.CUST_REP || ' ' || REC.CREDIT_LIMIT );
            end loop;
    end;

BEGIN
    SORTPROC('CUST_NUM','ASC');
end;




-- Создайте процедуру, которая сортирует таблицу по определенному столбцу.
-- Параметры – название столбца, порядок сортировки (ASC, DESC). Обработайте возможные ошибки.
CREATE OR REPLACE PROCEDURE SORT_TABLE(
    p_column_name VARCHAR2,
    p_sort_order VARCHAR2
)
IS
    v_result_string VARCHAR2(200);
    CURSOR c_orders IS
        SELECT * FROM ORDERS ORDER BY p_column_name || ' ' || p_sort_order;
BEGIN
    FOR rec IN c_orders
    LOOP
        v_result_string := rec.ORDER_NUM || ' ' || rec.ORDER_DATE || ' ' || rec.PRODUCT;
        DBMS_OUTPUT.PUT_LINE(v_result_string);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


BEGIN
    SORT_TABLE('', 'ASC');
END;















CREATE OR REPLACE PROCEDURE sort_table
(
    p_column_name VARCHAR2,
    p_sort_order VARCHAR2
)
IS
    l_count NUMBER;
    l_query VARCHAR2(2000);
BEGIN
    -- Проверка наличия указанного столбца в таблице
    l_query := 'SELECT COUNT(*) FROM USER_TAB_COLUMNS WHERE TABLE_NAME = ''YOUR_TABLE_NAME'' AND COLUMN_NAME = :1';
    EXECUTE IMMEDIATE l_query INTO l_count USING p_column_name;

    IF l_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Столбец ' || p_column_name || ' не найден в таблице.');
        RETURN;
    END IF;

    -- Формирование запроса с указанным столбцом и порядком сортировки
    l_query := 'SELECT * FROM YOUR_TABLE_NAME ORDER BY ' || p_column_name || ' ' || p_sort_order;

    -- Выполнение запроса
    EXECUTE IMMEDIATE l_query;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;

    BEGIN
    sort_table('COLUMN_NAME', 'ASC');
END;





DROP TABLE ORDERS CASCADE CONSTRAINTS;
DROP TABLE CUSTOMERS CASCADE CONSTRAINTS;
DROP TABLE SALESREPS CASCADE CONSTRAINTS;
DROP TABLE OFFICES CASCADE CONSTRAINTS;
DROP TABLE PRODUCTS CASCADE CONSTRAINTS;


CREATE TABLE PRODUCTS
     (MFR_ID CHAR(3) NOT NULL,
  PRODUCT_ID CHAR(5) NOT NULL,
 DESCRIPTION VARCHAR(20) NOT NULL,
       PRICE DECIMAL(9,2) NOT NULL,
 QTY_ON_HAND INTEGER NOT NULL,
 PRIMARY KEY (MFR_ID, PRODUCT_ID));


CREATE TABLE OFFICES
     (OFFICE INTEGER NOT NULL,
        CITY VARCHAR(15) NOT NULL,
      REGION VARCHAR(10) NOT NULL,
         MGR INTEGER,
      TARGET DECIMAL(9,2),
       SALES DECIMAL(9,2) NOT NULL,
 PRIMARY KEY (OFFICE));


CREATE TABLE SALESREPS
   (EMPL_NUM INTEGER NOT NULL,
             CHECK (EMPL_NUM BETWEEN 101 AND 199),
        NAME VARCHAR(15) NOT NULL,
         AGE INTEGER,
  REP_OFFICE INTEGER,
       TITLE VARCHAR(10),
   HIRE_DATE DATE NOT NULL,
     MANAGER INTEGER,
       QUOTA DECIMAL(9,2),
       SALES DECIMAL(9,2) NOT NULL,
 PRIMARY KEY (EMPL_NUM),
 FOREIGN KEY (MANAGER)
  REFERENCES SALESREPS(EMPL_NUM)
  ON DELETE SET NULL,
 CONSTRAINT WORKSIN FOREIGN KEY (REP_OFFICE)
  REFERENCES OFFICES(OFFICE)
  ON DELETE SET NULL);


CREATE TABLE CUSTOMERS
   (CUST_NUM INTEGER    NOT NULL,
    COMPANY  VARCHAR(20) NOT NULL,
    CUST_REP INTEGER,
    CREDIT_LIMIT DECIMAL(9,2),
 PRIMARY KEY (CUST_NUM),
 CONSTRAINT HASREP FOREIGN KEY (CUST_REP)
  REFERENCES SALESREPS(EMPL_NUM)
   ON DELETE SET NULL);


CREATE TABLE ORDERS
  (ORDER_NUM INTEGER NOT NULL,
             CHECK (ORDER_NUM > 100000),
  ORDER_DATE DATE NOT NULL,
        CUST INTEGER NOT NULL,
         REP INTEGER,
         MFR CHAR(3) NOT NULL,
     PRODUCT CHAR(5) NOT NULL,
         QTY INTEGER NOT NULL,
      AMOUNT DECIMAL(9,2) NOT NULL,
 PRIMARY KEY (ORDER_NUM),
 CONSTRAINT PLACEDBY FOREIGN KEY (CUST)
  REFERENCES CUSTOMERS(CUST_NUM)
   ON DELETE CASCADE,
 CONSTRAINT TAKENBY FOREIGN KEY (REP)
  REFERENCES SALESREPS(EMPL_NUM)
   ON DELETE SET NULL,
 CONSTRAINT ISFOR FOREIGN KEY (MFR, PRODUCT)
  REFERENCES PRODUCTS(MFR_ID, PRODUCT_ID));


ALTER TABLE OFFICES
  ADD CONSTRAINT HASMGR
  FOREIGN KEY (MGR) REFERENCES SALESREPS(EMPL_NUM)
  ON DELETE SET NULL;

---
---  Inserts for sample schema, tailored for Oracle
---

alter session set NLS_DATE_FORMAT='YYYY-MM-DD';

delete from orders;
delete from customers;
update offices set mgr=null;
delete from salesreps;
delete from offices;
delete from products;
commit;

---
---  PRODUCTS
---
INSERT INTO PRODUCTS VALUES('REI','2A45C','Ratchet Link',79.00,210);
INSERT INTO PRODUCTS VALUES('ACI','4100Y','Widget Remover',2750.00,25);
INSERT INTO PRODUCTS VALUES('QSA','XK47 ','Reducer',355.00,38);
INSERT INTO PRODUCTS VALUES('BIC','41627','Plate',180.00,0);
INSERT INTO PRODUCTS VALUES('IMM','779C ','900-LB Brace',1875.00,9);
INSERT INTO PRODUCTS VALUES('ACI','41003','Size 3 Widget',107.00,207);
INSERT INTO PRODUCTS VALUES('ACI','41004','Size 4 Widget',117.00,139);
INSERT INTO PRODUCTS VALUES('BIC','41003','Handle',652.00,3);
INSERT INTO PRODUCTS VALUES('IMM','887P ','Brace Pin',250.00,24);
INSERT INTO PRODUCTS VALUES('QSA','XK48 ','Reducer',134.00,203);
INSERT INTO PRODUCTS VALUES('REI','2A44L','Left Hinge',4500.00,12);
INSERT INTO PRODUCTS VALUES('FEA','112  ','Housing',148.00,115);
INSERT INTO PRODUCTS VALUES('IMM','887H ','Brace Holder',54.00,223);
INSERT INTO PRODUCTS VALUES('BIC','41089','Retainer',225.00,78);
INSERT INTO PRODUCTS VALUES('ACI','41001','Size 1 Wiget',55.00,277);
INSERT INTO PRODUCTS VALUES('IMM','775C ','500-lb Brace',1425.00,5);
INSERT INTO PRODUCTS VALUES('ACI','4100Z','Widget Installer',2500.00,28);
INSERT INTO PRODUCTS VALUES('QSA','XK48A','Reducer',177.00,37);
INSERT INTO PRODUCTS VALUES('ACI','41002','Size 2 Widget',76.00,167);
INSERT INTO PRODUCTS VALUES('REI','2A44R','Right Hinge',4500.00,12);
INSERT INTO PRODUCTS VALUES('IMM','773C ','300-lb Brace',975.00,28);
INSERT INTO PRODUCTS VALUES('ACI','4100X','Widget Adjuster',25.00,37);
INSERT INTO PRODUCTS VALUES('FEA','114  ','Motor Mount',243.00,15);
INSERT INTO PRODUCTS VALUES('IMM','887X ','Brace Retainer',475.00,32);
INSERT INTO PRODUCTS VALUES('REI','2A44G','Hinge Pin',350.00,14);
commit;

---
---  OFFICES
---
INSERT INTO OFFICES VALUES(22,'Denver','Western',null,300000.00,186042.00);
INSERT INTO OFFICES VALUES(11,'New York','Eastern',null,575000.00,692637.00);
INSERT INTO OFFICES VALUES(12,'Chicago','Eastern',null,800000.00,735042.00);
INSERT INTO OFFICES VALUES(13,'Atlanta','Eastern',null,350000.00,367911.00);
INSERT INTO OFFICES VALUES(21,'Los Angeles','Western',null,725000.00,835915.00);
commit;

---
---  SALESREPS
---
INSERT INTO SALESREPS VALUES (106,'Sam Clark',52,11,'VP Sales','2006-06-14',null,275000.00,299912.00);
INSERT INTO SALESREPS VALUES (109,'Mary Jones',31,11,'Sales Rep','2007-10-12',106,300000.00,392725.00);
INSERT INTO SALESREPS VALUES (104,'Bob Smith',33,12,'Sales Mgr','2005-05-19',106,200000.00,142594.00);
INSERT INTO SALESREPS VALUES (108,'Larry Fitch',62,21,'Sales Mgr','2007-10-12',106,350000.00,361865.00);
INSERT INTO SALESREPS VALUES (105,'Bill Adams',37,13,'Sales Rep','2006-02-12',104,350000.00,367911.00);
INSERT INTO SALESREPS VALUES (102,'Sue Smith',48,21,'Sales Rep','2004-12-10',108,350000.00,474050.00);
INSERT INTO SALESREPS VALUES (101,'Dan Roberts',45,12,'Sales Rep','2004-10-20',104,300000.00,305673.00);
INSERT INTO SALESREPS VALUES (110,'Tom Snyder',41,null,'Sales Rep','2008-01-13',101,null,75985.00);
INSERT INTO SALESREPS VALUES (103,'Paul Cruz',29,12,'Sales Rep','2005-03-01',104,275000.00,286775.00);
INSERT INTO SALESREPS VALUES (107,'Nancy Angelli',49,22,'Sales Rep','2006-11-14',108,300000.00,186042.00);
commit;

---
---   OFFICE MANAGERS
---
UPDATE OFFICES SET MGR=108 WHERE OFFICE=22;
UPDATE OFFICES SET MGR=106 WHERE OFFICE=11;
UPDATE OFFICES SET MGR=104 WHERE OFFICE=12;
UPDATE OFFICES SET MGR=105 WHERE OFFICE=13;
UPDATE OFFICES SET MGR=108 WHERE OFFICE=21;
commit;

---
---   CUSTOMERS
---
INSERT INTO CUSTOMERS VALUES(2111,'JCP Inc.',103,50000.00);
INSERT INTO CUSTOMERS VALUES(2102,'First Corp.',101,65000.00);
INSERT INTO CUSTOMERS VALUES(2103,'Acme Mfg.',105,50000.00);
INSERT INTO CUSTOMERS VALUES(2123,'Carter \& Sons',102,40000.00);
INSERT INTO CUSTOMERS VALUES(2107,'Ace International',110,35000.00);
INSERT INTO CUSTOMERS VALUES(2115,'Smithson Corp.',101,20000.00);
INSERT INTO CUSTOMERS VALUES(2101,'Jones Mfg.',106,65000.00);
INSERT INTO CUSTOMERS VALUES(2112,'Zetacorp',108,50000.00);
INSERT INTO CUSTOMERS VALUES(2121,'QMA Assoc.',103,45000.00);
INSERT INTO CUSTOMERS VALUES(2114,'Orion Corp.',102,20000.00);
INSERT INTO CUSTOMERS VALUES(2124,'Peter Brothers',107,40000.00);
INSERT INTO CUSTOMERS VALUES(2108,'Holm \& Landis',109,55000.00);
INSERT INTO CUSTOMERS VALUES(2117,'J.P. Sinclair',106,35000.00);
INSERT INTO CUSTOMERS VALUES(2122,'Three Way Lines',105,30000.00);
INSERT INTO CUSTOMERS VALUES(2120,'Rico Enterprises',102,50000.00);
INSERT INTO CUSTOMERS VALUES(2106,'Fred Lewis Corp.',102,65000.00);
INSERT INTO CUSTOMERS VALUES(2119,'Solomon Inc.',109,25000.00);
INSERT INTO CUSTOMERS VALUES(2118,'Midwest Systems',108,60000.00);
INSERT INTO CUSTOMERS VALUES(2113,'Ian \& Schmidt',104,20000.00);
INSERT INTO CUSTOMERS VALUES(2109,'Chen Associates',103,25000.00);
INSERT INTO CUSTOMERS VALUES(2105,'AAA Investments',101,45000.00);
commit;

---
---  ORDERS
---
INSERT INTO ORDERS VALUES (112961,'2007-12-17',2117,106,'REI','2A44L',7,31500.00);
INSERT INTO ORDERS VALUES (113012,'2008-01-11',2111,105,'ACI','41003',35,3745.00);
INSERT INTO ORDERS VALUES (112989,'2008-01-03',2101,106,'FEA','114',6,1458.00);
INSERT INTO ORDERS VALUES (113051,'2008-02-10',2118,108,'QSA','XK47',4,1420.00);
INSERT INTO ORDERS VALUES (112968,'2007-10-12',2102,101,'ACI','41004',34,3978.00);
INSERT INTO ORDERS VALUES (113036,'2008-01-30',2107,110,'ACI','4100Z',9,22500.00);
INSERT INTO ORDERS VALUES (113045,'2008-02-02',2112,108,'REI','2A44R',10,45000.00);
INSERT INTO ORDERS VALUES (112963,'2007-12-17',2103,105,'ACI','41004',28,3276.00);
INSERT INTO ORDERS VALUES (113013,'2008-01-14',2118,108,'BIC','41003',1,652.00);
INSERT INTO ORDERS VALUES (113058,'2008-02-23',2108,109,'FEA','112',10,1480.00);
INSERT INTO ORDERS VALUES (112997,'2008-01-08',2124,107,'BIC','41003',1,652.00);
INSERT INTO ORDERS VALUES (112983,'2007-12-27',2103,105,'ACI','41004',6,702.00);
INSERT INTO ORDERS VALUES (113024,'2008-01-20',2114,108,'QSA','XK47',20,7100.00);
INSERT INTO ORDERS VALUES (113062,'2008-02-24',2124,107,'FEA','114',10,2430.00);
INSERT INTO ORDERS VALUES (112979,'2007-10-12',2114,102,'ACI','4100Z',6,15000.00);
INSERT INTO ORDERS VALUES (113027,'2008-01-22',2103,105,'ACI','41002',54,4104.00);
INSERT INTO ORDERS VALUES (113007,'2008-01-08',2112,108,'IMM','773C',3,2925.00);
INSERT INTO ORDERS VALUES (113069,'2008-03-02',2109,107,'IMM','775C',22,31350.00);
INSERT INTO ORDERS VALUES (113034,'2008-01-29',2107,110,'REI','2A45C',8,632.00);
INSERT INTO ORDERS VALUES (112992,'2007-11-04',2118,108,'ACI','41002',10,760.00);
INSERT INTO ORDERS VALUES (112975,'2007-10-12',2111,103,'REI','2A44G',6,2100.00);
INSERT INTO ORDERS VALUES (113055,'2008-02-15',2108,101,'ACI','4100X',6,150.00);
INSERT INTO ORDERS VALUES (113048,'2008-02-10',2120,102,'IMM','779C',2,3750.00);
INSERT INTO ORDERS VALUES (112993,'2007-01-04',2106,102,'REI','2A45C',24,1896.00);
INSERT INTO ORDERS VALUES (113065,'2008-02-27',2106,102,'QSA','XK47',6,2130.00);
INSERT INTO ORDERS VALUES (113003,'2008-01-25',2108,109,'IMM','779C',3,5625.00);
INSERT INTO ORDERS VALUES (113049,'2008-02-10',2118,108,'QSA','XK47',2,776.00);
INSERT INTO ORDERS VALUES (112987,'2007-12-31',2103,105,'ACI','4100Y',11,27500.00);
INSERT INTO ORDERS VALUES (113057,'2008-02-18',2111,103,'ACI','4100X',24,600.00);
INSERT INTO ORDERS VALUES (113042,'2008-02-20',2113,101,'REI','2A44R',5,22500.00);
commit;